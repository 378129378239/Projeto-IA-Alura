# -*- coding: utf-8 -*-
"""c-pia-de-untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/378129378239/50aa8ee449198ca9193b32618106a485/c-pia-de-untitled1.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

!pip install google-generativeai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando √© a pr√≥xima imers√£o de IA ###############################################
resposta = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Pergunta ao Gemini uma informa√ß√£o utilizando a busca do Google como contexto

response = client.models.generate_content(model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
    config={"tools": [{"google_search": {}}]}
    )


# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# URLs fornecidas para base de conhecimento dos agentes
PROVIDED_URLS = [
    "https://www.psitto.com.br/blog/tipos-terapia/",
    "https://www.paho.org/pt/noticias/25-6-2024-mais-tres-milhoes-pessoas-morrem-cada-ano-maioria-homens-devido-ao-uso-alcool-e",
    "https://www.gov.br/saude/pt-br/composicao/saes/desmad/raps/caps",
    "https://www.gov.br/mds/pt-br/noticias-e-conteudos/publicacoes/desenvolvimento-social/cartilha_como-ajudar-uma-pessoa-dependente-de-drogas.pdf",
    "https://www.scielo.br/j/pe/a/4RMNrWKNpxxyzJ5FLZZgFJD/",
    "https://subpav.org/aps/uploads/publico/repositorio/guia_de_referencia_rapida_-_alcool_e_outras_drogas_(1).pdf"
]
URLS_STRING = "\n".join(PROVIDED_URLS) # String com as URLs para passar aos agentes

def agente_buscador(topico, data_de_hoje):
    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        description="Agente que informa√ß√µes no google",
        tools=[google_search],
        instruction="""
        Voc√™ √© um assistente especializado em sa√∫de mental e v√≠cios. A sua tarefa √© usar a ferramenta (PROVIDED_URLS) para recuperar as √∫ltimas diretrizes cuidados
        relevantes sobre o t√≥pico abaixo.
        Sua tarefa √© formular de 3 a 5 perguntas SIMPLES e DIRETAS (com respostas apenas 'sim' ou 'n√£o')
        """
        )
    entrada_do_agente_buscador = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}"
    lancamentos_buscados = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos_buscados

################################################
# --- Agente 2: Planejador de posts --- #
################################################
def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um planejador de rotinas, especialista em recupera√ß√£o de adictos. Com base nas respostas dadas pelo usu√°rio
        voc√™ deve: usar as (PROVIDED_URLS) para criar um plano sobre como motivar o usu√°rio a sair de sua condi√ß√£o atual.
        O plano deve ser escrito em portugu√™s.
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

######################################
# --- Agente 3: Redator do Post --- #
######################################
def agente_localizador(topico, plano_de_post):
    localizador = Agent(
        name="agente_localizador",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um especialista sobre aonde procurar auxilio utilize (PROVIDED_URLS) para indicar quais tipos de terapia o usu√°rio pode procurar
            E quais locais ele pode procurar.
            O plano deve ser escrito em portugu√™s.
            """,
        description="Agente localizador"
    )
    entrada_do_agente_localizador = f"T√≥pico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(localizador, entrada_do_agente_localizador)
    return rascunho

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Diario de Progresso üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite o tipo de adic√ß√£o que voc√™ deseja combater: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not topico:
  print("Voc√™ esqueceu de digitar o t√≥pico")
else:
  print(f"Maravilha! Vamos a luta contra o {topico}")

  lancamentos = agente_buscador(topico, data_de_hoje)
  print('\n--- resultado do agente 1(Buscador) ---\n')
  display(to_markdown(lancamentos))
  print("-------------------------------------------------------")

  plano_de_post = agente_planejador(topico, lancamentos)
  print('\n--- resultado do agente 2(Planejador) ---\n')
  display(to_markdown(plano_de_post))
  print("-------------------------------------------------------")

  rascunho_de_post = agente_localizador(topico, plano_de_post)
  print('\n--- resultado do agente 3(localizador) ---\n')
  display(to_markdown(rascunho_de_post))
  print("-------------------------------------------------------")